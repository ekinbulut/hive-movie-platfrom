services:
  hive-app:
    build:
      context: .
      dockerfile: ./src/app/Hive.App/Dockerfile
    image: localhost/hive-app:latest
    container_name: hive-app
    ports:
      - "0.0.0.0:8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
    restart: unless-stopped
    networks:
      - hive-network
  hive-idm:
    build:
      context: .
      dockerfile: ./src/idm/Hive.Idm.Api/Dockerfile
    image: localhost/hive-idm:latest
    container_name: hive-idm
    ports:
      - "0.0.0.0:8082:8082"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8082
    restart: unless-stopped
    networks:
      - hive-network
  hive-watcher:
    build:
      context: .
      dockerfile: ./src/app/Watcher.Console.App/Dockerfile
    image: localhost/hive-watcher:latest
    container_name: hive-watcher
    command: [ "--watch", "/app/shared" ]
    volumes:
      - "/home/user/shared/Plex/Shared Movies:/app/shared"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - JELLYFIN_BASE_URL=http://192.168.1.112:8096
      - JELLYFIN_ACCESS_TOKEN=""
    restart: unless-stopped
    depends_on:
      - hive-app
      - hive-idm
    networks:
      - hive-network
    healthcheck:
      test: [ "CMD", "test", "-d", "/app/shared" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
  project-hive-web:
    build:
      context: .
      dockerfile: ./src/web/Dockerfile
    image: localhost/project-hive-web:latest
    container_name: project-hive-web
    ports:
      - "0.0.0.0:8000:80"
    restart: unless-stopped
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
      - AUTH_BASE_URL=http://192.168.1.112:8082
      - MOVIES_BASE_URL=http://192.168.1.112:8080
      - JELLYFIN_BASE_URL=http://192.168.1.112:8096
      - JELLYFIN_ACCESS_TOKEN=""
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "app=project-hive-web"
      - "maintainer=project-hive"
    depends_on:
      - hive-app
      - hive-idm
    networks:
      - hive-network
  jellyfin:
    image: docker.io/jellyfin/jellyfin:latest
    container_name: jellyfin
    ports:
      - "8096:8096/tcp"
      - "7359:7359/udp"
    volumes:
      - jellyfin-cache:/cache
      - jellyfin-config:/config
      - "/home/user/shared/Plex/Shared Movies:/media:ro"
    user: "${UID:-1000}:${GID:-1000}"
    restart: unless-stopped
    networks:
      - hive-network
    labels:
      - "io.containers.autoupdate=registry"
      -
  postgres:
    image: docker.io/postgres:15-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hive-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 3
  
  redis:
    image: docker.io/redis:7-alpine
    container_name: redis_cache
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass 181985
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hive-network
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 3s
      retries: 3

  rabbitmq:
    image: docker.io/rabbitmq:4.1.4-management-alpine
    container_name: rabbitmq_broker
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - hive-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3


volumes:
  jellyfin-cache:
  jellyfin-config:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  hive-network:
    driver: bridge
